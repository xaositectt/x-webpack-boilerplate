const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const ManifestPlugin = require('webpack-manifest-plugin');
const webpack = require('webpack')
const devServerOptions = require('./devserver')

module.exports = {
  entry: {
    app: './src/index.js',
    // print: './src/js/print.js'
  },
  // default build tool, helps with informative error messages in browser console
  // devtool: 'inline-source-map',
  devServer: devServerOptions,
  plugins: [
    new ManifestPlugin(),
    // check this if you want to delete the dist folder after each compile
    // new CleanWebpackPlugin(['dist']),
    new HtmlWebpackPlugin({
      title: 'webpack practice',
      filename: './index.html',
      //inject script tags to the end of html body- head means to head
      inject: 'body',
      // the index.html will be based on this file
      template: './index.html',
      //emit the file only if it was changed
      cache: true
    }),
    new webpack.HotModuleReplacementPlugin(),
    // this ensures that vendor chunks have the same id after something changes in non-vendor content
    new webpack.HashedModuleIdsPlugin()
  ],
  mode: 'development', // "production" | "development" | "none",
  // this ensures that external libraries/modules get bundled into a separate bundle file
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors'
        }
      }
    }
  },
  output: {
    filename: '[name].bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader']
      },
      {
        test: /\.(jpe?g|png|gif|woff|woff2|eot|ttf|svg)(\?[a-z0-9=.]+)?$/,
        use: ['url-loader']
      },
      //loÂ ad fonts from .woff files
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: ['file-loader']
      },
      //csv and xml loaders
      {
        test: /\.(csv|tsv)$/,
        use: ['csv-loader']
      },
      {
        test: /\.xml$/,
        use: ['xml-loader']
      }
    ]
  }
}
